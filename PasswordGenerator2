import java.security.SecureRandom;

public class PasswordGenerator2 {

    private static final String LOWERCASE_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String DIGITS = "0123456789";
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*()-_=+[]{}|;:'\",.<>/?";

    public static String generatePassword(PasswordConfigDTO config) {
        // Verificar si se deben aplicar las restricciones de la versión 1
        if (!config.isRestrictMinDigits()) {
            // Si restrictMinDigits es FALSE, aplicar las restricciones de la versión 1
            return generatePassword(config.getMinLength());
        }

        // Validar que las restricciones sean coherentes
        validateConfig(config);

        // Crear un generador seguro de números aleatorios
        SecureRandom random = new SecureRandom();

        // Inicializar un StringBuilder para construir la contraseña
        StringBuilder password = new StringBuilder();

        // Añadir la cantidad mínima de dígitos, letras mayúsculas, letras minúsculas y caracteres especiales
        addRandomCharacters(password, DIGITS, config.getMinDigits(), random);
        addRandomCharacters(password, UPPERCASE_CHARACTERS, config.getMinUpperCaseLetters(), random);
        addRandomCharacters(password, LOWERCASE_CHARACTERS, config.getMinLowerCaseLetters(), random);
        addRandomCharacters(password, SPECIAL_CHARACTERS, config.getMinNonAlphanumericCharacters(), random);

        // Generar el resto de la contraseña
        int remainingLength = config.getMinLength() - password.length();
        String allCharacters = LOWERCASE_CHARACTERS + UPPERCASE_CHARACTERS + DIGITS + SPECIAL_CHARACTERS;
        addRandomCharacters(password, allCharacters, remainingLength, random);

        // Mezclar los caracteres en la contraseña para mayor aleatoriedad
        String shuffledPassword = shuffleString(password.toString(), random);

        return shuffledPassword;
    }

    // Método para validar la coherencia de las restricciones
    private static void validateConfig(PasswordConfigDTO config) {
        if (config.getMinDigits() < 0 || config.getMinUpperCaseLetters() < 0 ||
            config.getMinLowerCaseLetters() < 0 || config.getMinNonAlphanumericCharacters() < 0 ||
            config.getMinLength() < 0) {
            throw new IllegalArgumentException("Las restricciones no pueden ser valores negativos.");
        }

        if (config.getMinLength() < config.getMinDigits() + config.getMinUpperCaseLetters() +
            config.getMinLowerCaseLetters() + config.getMinNonAlphanumericCharacters()) {
            throw new IllegalArgumentException("La longitud mínima de la contraseña es insuficiente para cumplir con las restricciones.");
        }
    }

    // Método para añadir caracteres aleatorios de una fuente dada a la contraseña
    private static void addRandomCharacters(StringBuilder password, String source, int count, SecureRandom random) {
        for (int i = 0; i < count; i++) {
            password.append(getRandomCharacter(source, random));
        }
    }

    // Resto de métodos como en la versión 1

  

}
